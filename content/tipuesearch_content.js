var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://leekuchu006.github.io/cd2024/ \n 網誌:  https://leekuchu006.github.io/cd2024/blog \n 簡報:  https://leekuchu006.github.io/cd2024/reveal \n 倉儲:  https://github.com/leekuchu006/cd2024.git \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'Mid-term Presentation', 'text': '報告影片內容包含期中之前所執行之工作，影片由youtube呈現，內容如下 \n 期中報告影片 \n', 'tags': '', 'url': 'Mid-term Presentation.html'}, {'title': 'Ball balance research', 'text': '進行SRV02的2D球平衡器實驗需要一些先決條件和步驟： \n \n \n 理解系統動態 : 你需要理解系統的動態特性，包括球在平台上的行為、它對重力等外部力的響應，以及它與控制輸入的相互作用。 \n \n \n 熟悉控制理論 : 掌握控制理論對於設計PID控制器至關重要，這包括了解比例、積分和微分控制的基本概念，以及如何將它們應用於系統控制。 \n \n \n 基本的PID控制知識 : 了解PID控制的基本原理，包括如何調節比例、積分和微分參數以實現所需的控制性能。 \n \n \n 建立系統的數學模型 : 根據系統的動力學原理，建立系統的數學模型，以便進行控制器設計和分析。 \n \n \n 設計PID控制器 : 根據系統的數學模型和所需的控制性能，設計PID控制器，調節比例、積分和微分增益以實現平衡控制。 \n \n \n 設置控制目標 : 確定所需的控制目標，例如平衡球的位置或速度，以便調節控制器以達到這些目標。 \n \n \n 實際測試和調整 : 通過實際測試和調整系統，確保控制器能夠有效地實現所需的控制性能。 \n \n \n - \n \xa0 \xa0 \xa0 本研究針對在平台上平衡球的實時控制系統進行了研究，採用了PID調節器和FPGA技術的並行實現。 \n PID調節器通過FPGA技術的並行計算，提高了對平台上球位置調節的準確性。 \n 研究通過實驗驗證了使用PID調節器和FPGA技術實現的系統對平衡球位置的準確性和實時性。 \n - \n \xa0 \xa0 \xa0 實驗平台的設計與控制系統,該平台用於平衡一個球在一個平板上。 \n 該平台採用電阻式觸控螢幕來獲取球的位置資料,並使用步進電機和電位計來獲得平台傾角的反饋數據。 \n 控制系統採用AVR微控制器實現,使用兩迴路從屬控制,外迴路用於控制球的位置,內迴路用於控制平台的傾斜角度。兩個迴路都使用PID控制器。 \n 控制系統能夠有效地將球維持在觸控螢幕的中心位置,即使遇到外部干擾。 \n 這種球平衡系統可以應用於許多領域,如航海、航空等需要平面穩定控制的場合。 \n 提出了一些未來的改進方向,如優化球位置反饋信號的濾波以提高控制質量,以及將該問題推廣到更複雜的三自由度Delta機器人控制。 \n - \n \xa0 \xa0 \xa0控制理論對於管理動態系統至關重要,尤其是那些天生不穩定或半穩定的系統,它可以透過補償干擾和外部影響來達到控制。 \n 構建一個實體裝置,例如一個平衡球的平台,可以作為這些原理的實際演示,允許將實際的物理結果與基於牛頓力學的電腦模擬結果進行比較。 \n 在這項研究中,實現了一個比例-積分-微分(PID)控制器來管理系統,這對於分析穩定天然不穩定或半穩定系統的局限性,以及理解這些局限性與理論預期之間的差異至關重要。 \n 所使用的控制系統是線性的,旨在在控制的線性範圍內有效運作,利用標準元件和用Arduino庫和開源代碼編程的微控制器。 \n 該研究包括使用計算機輔助程序構建球在平台上的理論模型,然後將這些理論結果與實體裝置獲得的結果進行比較,以探索控制理論應用和系統實現時產生的差異。 \n - \n \xa0 \xa0 \xa0 開發一個球平衡系統,用於控制理論課程教學。該系統使用微控制器和控制算法來調節樞鈕的角度,從而平衡梁上的球。 \n 描述了三個原型的設計過程及優缺點比較,最終選擇了一個使用木材製作、集成伺服電機、超聲波傳感器和Arduino微控制器板的最終模型。 \n 介紹了基於PID控制的算法,用於根據球的實際位置和預設位置的偏差來調節樞鈕角度。還提出了自適應PID控制的思路。 \n 實現了MATLAB與Arduino之間的串口通信,可在MATLAB中實時繪製球的位置曲線。 \n 給出了一些實驗結果,包括不同球體在不同PID參數下的位置曲線,分析了系統的階次和陷波特性。 \n 該球平衡系統可以作為一個便捷的平台,讓學生學習和理解反饋控制系統、PID控制和微控制器編程等理論知識,將理論與實踐相結合。 \n 最後探討了該系統在教學上的優勢,以及可以推廣到更複雜系統控制的可能性。 \n - \n \xa0 \xa0 \xa0 本文介紹了一個雙軸平台系統,用於平衡一個球於平板上,可用於測試各種控制理論和技術。 \n 給出了該平衡系統的數學模型推導過程,採用牛頓第二定律並對系統進行線性化近似。 \n 文中設計並比較了三種不同的控制結構:PID控制器、全狀態反饋控制和帶有狀態觀測器的狀態反饋控制。這三種方法的控制器參數都使用極點配置法進行設計。 \n 實驗結果表明,帶狀態觀測器的狀態反饋控制結構表現最佳,能較好地跟蹤球的軌跡並抑制噪聲。 \n 實驗平台採用電阻式觸控面板獲取球位置信息,直流電機通過全橋驅動控制平台傾斜角度。整體由Kinetis K60數字信號控制器完成控制。 \n 該平衡系統可用於多個領域,如相機穩定控制、海船與飛機的平面穩定等。 \n 最後給出了平衡系統的詳細控制框圖,以及與仿真對比的實驗步答應曲線和頻響特性曲線。', 'tags': '', 'url': 'Ball balance research.html'}, {'title': 'Nx Training', 'text': '利用NX1872理解NX的各種功能以及設定。 \n \n 版本及伺服器位置如下。 \n \n 從 Menu → Tools\xa0 → Journal\xa0→ Play 使用 Journal 功能進行導入。 \n \n 選取欲導入的程式，此處以老師寫好之程式碼做練習。 \n \n 選取完畢後點擊 Run 即開始運行。 \n \n 建立完成。 \n \n', 'tags': '', 'url': 'Nx Training.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};