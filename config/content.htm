<h1>About</h1>
<p>網頁:<a href="https://leekuchu006.github.io/cd2024/"> https://leekuchu006.github.io/cd2024/</a></p>
<p>網誌: <a href="https://leekuchu006.github.io/cd2024/blog">https://leekuchu006.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://leekuchu006.github.io/cd2024/reveal">https://leekuchu006.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/leekuchu006/cd2024.git">https://github.com/leekuchu006/cd2024.git</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>W17 Internship</h1>
<p><a href="https://youtu.be/GCUnIg9IEw4">NX 繪圖過程影片</a></p>
<p><a href="https://drive.google.com/drive/folders/17Dnr4u-L5wAZGExn3DXLmzaCwLHNYBrQ?usp=drive_link">Journal程式及圖檔</a></p>
<h1>Mid-term Presentation</h1>
<p>報告影片內容包含期中之前所執行之工作，影片由youtube呈現，內容如下</p>
<p><a href="https://youtu.be/4M5lXUErHiE">期中報告影片</a></p>
<h1>Ball balance research</h1>
<p>進行SRV02的2D球平衡器實驗需要一些先決條件和步驟：</p>
<ol>
<li>
<p><strong>理解系統動態</strong>: 你需要理解系統的動態特性，包括球在平台上的行為、它對重力等外部力的響應，以及它與控制輸入的相互作用。</p>
</li>
<li>
<p><strong>熟悉控制理論</strong>: 掌握控制理論對於設計PID控制器至關重要，這包括了解比例、積分和微分控制的基本概念，以及如何將它們應用於系統控制。</p>
</li>
<li>
<p><strong>基本的PID控制知識</strong>: 了解PID控制的基本原理，包括如何調節比例、積分和微分參數以實現所需的控制性能。</p>
</li>
<li>
<p><strong>建立系統的數學模型</strong>: 根據系統的動力學原理，建立系統的數學模型，以便進行控制器設計和分析。</p>
</li>
<li>
<p><strong>設計PID控制器</strong>: 根據系統的數學模型和所需的控制性能，設計PID控制器，調節比例、積分和微分增益以實現平衡控制。</p>
</li>
<li>
<p><strong>設置控制目標</strong>: 確定所需的控制目標，例如平衡球的位置或速度，以便調節控制器以達到這些目標。</p>
</li>
<li>
<p><strong>實際測試和調整</strong>: 通過實際測試和調整系統，確保控制器能夠有效地實現所需的控制性能。</p>
</li>
</ol>
<p>-</p>
<p>      本研究針對在平台上平衡球的實時控制系統進行了研究，採用了PID調節器和FPGA技術的並行實現。</p>
<p>PID調節器通過FPGA技術的並行計算，提高了對平台上球位置調節的準確性。</p>
<p>研究通過實驗驗證了使用PID調節器和FPGA技術實現的系統對平衡球位置的準確性和實時性。</p>
<p>-</p>
<p>      實驗平台的設計與控制系統,該平台用於平衡一個球在一個平板上。</p>
<p>該平台採用電阻式觸控螢幕來獲取球的位置資料,並使用步進電機和電位計來獲得平台傾角的反饋數據。</p>
<p>控制系統採用AVR微控制器實現,使用兩迴路從屬控制,外迴路用於控制球的位置,內迴路用於控制平台的傾斜角度。兩個迴路都使用PID控制器。</p>
<p>控制系統能夠有效地將球維持在觸控螢幕的中心位置,即使遇到外部干擾。</p>
<p>這種球平衡系統可以應用於許多領域,如航海、航空等需要平面穩定控制的場合。</p>
<p>提出了一些未來的改進方向,如優化球位置反饋信號的濾波以提高控制質量,以及將該問題推廣到更複雜的三自由度Delta機器人控制。</p>
<p>-</p>
<p class="whitespace-pre-wrap break-words">     控制理論對於管理動態系統至關重要,尤其是那些天生不穩定或半穩定的系統,它可以透過補償干擾和外部影響來達到控制。</p>
<p class="whitespace-pre-wrap break-words">構建一個實體裝置,例如一個平衡球的平台,可以作為這些原理的實際演示,允許將實際的物理結果與基於牛頓力學的電腦模擬結果進行比較。</p>
<p class="whitespace-pre-wrap break-words">在這項研究中,實現了一個比例-積分-微分(PID)控制器來管理系統,這對於分析穩定天然不穩定或半穩定系統的局限性,以及理解這些局限性與理論預期之間的差異至關重要。</p>
<p class="whitespace-pre-wrap break-words">所使用的控制系統是線性的,旨在在控制的線性範圍內有效運作,利用標準元件和用Arduino庫和開源代碼編程的微控制器。</p>
<p class="whitespace-pre-wrap break-words">該研究包括使用計算機輔助程序構建球在平台上的理論模型,然後將這些理論結果與實體裝置獲得的結果進行比較,以探索控制理論應用和系統實現時產生的差異。</p>
<p>-</p>
<p>      開發一個球平衡系統,用於控制理論課程教學。該系統使用微控制器和控制算法來調節樞鈕的角度,從而平衡梁上的球。</p>
<p>描述了三個原型的設計過程及優缺點比較,最終選擇了一個使用木材製作、集成伺服電機、超聲波傳感器和Arduino微控制器板的最終模型。</p>
<p>介紹了基於PID控制的算法,用於根據球的實際位置和預設位置的偏差來調節樞鈕角度。還提出了自適應PID控制的思路。</p>
<p>實現了MATLAB與Arduino之間的串口通信,可在MATLAB中實時繪製球的位置曲線。</p>
<p>給出了一些實驗結果,包括不同球體在不同PID參數下的位置曲線,分析了系統的階次和陷波特性。</p>
<p>該球平衡系統可以作為一個便捷的平台,讓學生學習和理解反饋控制系統、PID控制和微控制器編程等理論知識,將理論與實踐相結合。</p>
<p>最後探討了該系統在教學上的優勢,以及可以推廣到更複雜系統控制的可能性。</p>
<p>-</p>
<p>      本文介紹了一個雙軸平台系統,用於平衡一個球於平板上,可用於測試各種控制理論和技術。</p>
<p>給出了該平衡系統的數學模型推導過程,採用牛頓第二定律並對系統進行線性化近似。</p>
<p>文中設計並比較了三種不同的控制結構:PID控制器、全狀態反饋控制和帶有狀態觀測器的狀態反饋控制。這三種方法的控制器參數都使用極點配置法進行設計。</p>
<p>實驗結果表明,帶狀態觀測器的狀態反饋控制結構表現最佳,能較好地跟蹤球的軌跡並抑制噪聲。</p>
<p>實驗平台採用電阻式觸控面板獲取球位置信息,直流電機通過全橋驅動控制平台傾斜角度。整體由Kinetis K60數字信號控制器完成控制。</p>
<p>該平衡系統可用於多個領域,如相機穩定控制、海船與飛機的平面穩定等。</p>
<p>最後給出了平衡系統的詳細控制框圖,以及與仿真對比的實驗步答應曲線和頻響特性曲線。</p>
<h1>Nx training</h1>
<p>利用NX1872理解NX的各種功能以及設定。</p>
<p></p>
<p>版本及伺服器位置如下。</p>
<p><img alt="" height="111" src="/images/版本" width="569"/></p>
<p>從 Menu → Tools <span>→ Journal → Play 使用 Journal 功能進行導入。</span></p>
<p><span><img alt="" height="309" src="/images/journa;" width="392"/></span></p>
<p><span>選取欲導入的程式，此處以老師寫好之程式碼做練習。</span></p>
<p><span><img alt="" height="303" src="/images/選取畫面" width="555"/></span></p>
<p><span>選取完畢後點擊 Run 即開始運行。</span></p>
<p><span><img alt="" height="83" src="/images/建立長方體" width="194"/></span></p>
<p><span>建立完成。</span></p>
<p><span><img alt="" height="285" src="/images/建立完成" width="527"/></span></p>
<h1>Ball balancing part </h1>
<p>利用Journal功能進行錄製，並繪製出鋼球平衡台的上平台。</p>
<p>檔案如下。</p>
<p><a href="https://drive.google.com/file/d/1CsDSKsGOaIba2Ry51UUeM-qa7DCAciiu/view?usp=drive_link">鋼球平衡台上平台</a></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>